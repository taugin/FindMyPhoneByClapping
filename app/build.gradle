apply plugin: 'com.android.application'

apply from: 'https://taugin.gitee.io/adsdk/encrypt.gradle'

def isBuildRelease() {
    try {
        def result = getGradle().getStartParameter().getTaskRequests()[0]["args"][0].toString().toLowerCase(Locale.ENGLISH)
        return result.contains("release")
    } catch (Exception e) {
    }
    return false
}

if (isBuildRelease()) {
    apply plugin: 'applovin-quality-service'
    applovin {
        apiKey "NPumd35ESwUoMl4oHOZl4dt3XEV3xa6ExbdcmESmWZqzwGWix_cR3keSwDt0ZANfh4FpC0o3EpBAWgOdK_mrZ6"
    }
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

def PRODUCT_NAME = ["com.master.up.tool.clean": "UpClean"]
def PRIVACY_URL = ["com.master.up.tool.clean": "https://sites.google.com/view/upclean-main/policy"]
def EMAIL_US_ADDRESS = ["com.master.up.tool.clean": "xmwang8901@gmail.com"]
def UTM = ["com.master.up.tool.clean": "UpClean"]
def ONESIGNAL_APP_ID = ["com.master.up.tool.clean": "f9514d4f-199d-4a17-b378-95ecf82edcec"]
def TALKING_DATA_APP_KEY = ["com.master.up.tool.clean": "8AAF851C1D62414B8C6E74C5AC9BA4AE"]
def UMENG_APP_KEY = ["com.master.up.tool.clean": "64d4bf28bd4b621232ed84cb"]


android {
    signingConfigs {
        release {
            storeFile file('E:\\apps\\FindMyPhoneByClappingNew\\app\\find_phone_by_clap.jks')
            storePassword '123456'
            keyAlias 'key0'
            keyPassword '123456'
        }
    }
    compileSdk 33
    defaultConfig {
        applicationId "com.phonefinder.finderbyclap.devicefind"
        minSdk 24
        targetSdk 33
        versionCode 2
        versionName "1.1"
        signingConfig signingConfigs.release

        buildConfigField "String", "PRIVACY_URL", "\"" + PRIVACY_URL[applicationId] + "\""
        buildConfigField "String", "EMAIL_US_ADDRESS", "\"" + EMAIL_US_ADDRESS[applicationId] + "\""
        buildConfigField "String", "UTM", "\"" + UTM[applicationId] + "\""
        buildConfigField "String", "ONESIGNAL_APP_ID", "\"" + ONESIGNAL_APP_ID[applicationId] + "\""
        buildConfigField "String", "TALKING_DATA_APP_KEY", "\"" + TALKING_DATA_APP_KEY[applicationId] + "\""
        buildConfigField "String", "UMENG_APP_KEY", "\"" + UMENG_APP_KEY[applicationId] + "\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures{
        dataBinding = true
        viewBinding = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->

        variant.outputs.all { output ->
            if (variant.buildType.name == 'release') {
                def releaseApkName = PRODUCT_NAME[applicationId] + "_v" + android.defaultConfig.versionName +
                        '_release' + "_" + getDate() + '.apk'
                outputFileName = new File(releaseApkName)
            }
        }
    }
}


apply plugin: 'stringfog'
stringfog {
    // 这是加解密 key，可以自由定义。
//    def random = ["a", "b", "c", "d", "e", "f", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
//    Collections.shuffle(random)
//    key random.join()
    key getConfigKey()
    println "fogkey : " + key
    // 开关
    enable true
    // 加解密库的实现类路径，需和上面配置的加解密算法库一致。
    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
    // 指定需加密的代码包路径，可配置多个，未指定将默认全部加密。
    fogPackages = ['com.up', 'com.ups', 'com.sync']
}

def getConfigKey() {
    def versionName = android.defaultConfig.versionName
    println "version name : " + versionName
    return String.valueOf(("fine-" + versionName).hashCode())
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.intuit.ssp:ssp-android:1.0.6'
    implementation files('libs/musicg-1.4.2.0.jar')
    //lottiee
    implementation 'com.airbnb.android:lottie:6.0.0'
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.lifecycle:lifecycle-process:2.6.1'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'androidx.multidex:multidex:2.0.1'

    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9"

    if (isBuildRelease()) {
        implementation("com.hauyu:adsdk:${rootProject.ext.adsdk_version}")
    } else {
        implementation("com.hauyu:adsdk:${rootProject.ext.adsdk_version}@aar")
        implementation 'androidx.percentlayout:percentlayout:1.0.0'
        implementation 'com.google.android.gms:play-services-ads:21.3.0'
        // firebase
        implementation 'com.google.firebase:firebase-config:21.1.1'
    }
    implementation('com.hauyu:bcsdk:3.4.7')

    // view预加载占位符，参考文章：https://www.jianshu.com/p/49439c425ae3
    implementation 'me.samlss:broccoli:1.0.0'

    // stringfog
    implementation 'com.github.megatronking.stringfog:xor:1.1.0'

    implementation 'com.umeng.umsdk:common:9.5.2'// 必选
    implementation 'com.umeng.umsdk:asms:1.4.1'// 必选
    implementation 'com.umeng.umsdk:apm:1.7.0' // 错误分析模块改为独立库，看crash和性能数据请一定集成
    // talking data
    implementation 'com.talkingdata:talkingdata:5.0.12-1'
}