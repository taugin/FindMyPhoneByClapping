apply plugin: 'com.android.application'

apply from: 'https://taugin.gitee.io/adsdk/encrypt.gradle'

def isBuildRelease() {
    try {
        def result = getGradle().getStartParameter().getTaskRequests()[0]["args"][0].toString().toLowerCase(Locale.ENGLISH)
        return result.contains("release")
    } catch (Exception e) {
    }
    return false
}

if (isBuildRelease()) {
    apply plugin: 'applovin-quality-service'
    applovin {
        apiKey "NPumd35ESwUoMl4oHOZl4dt3XEV3xa6ExbdcmESmWZqzwGWix_cR3keSwDt0ZANfh4FpC0o3EpBAWgOdK_mrZ6"
    }
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

def PRODUCT_NAME = ["com.clap.find.tool.myphone": "ClapFindMyPhone"]
def PRIVACY_URL = ["com.clap.find.tool.myphone": "https://sites.google.com/view/claptofindmyphone2023/policy"]
def EMAIL_US_ADDRESS = ["com.clap.find.tool.myphone": "xmwang8901@gmail.com"]
def UTM = ["com.clap.find.tool.myphone": "ClapFindMyPhone"]
def ONESIGNAL_APP_ID = ["com.clap.find.tool.myphone": ""]
def TALKING_DATA_APP_KEY = ["com.clap.find.tool.myphone": "8017CA7F8E6F490D9F70A381DD0A3426"]
def UMENG_APP_KEY = ["com.clap.find.tool.myphone": "6538e8fc58a9eb5b0af5d19e"]


android {
    signingConfigs {
        release {
            keyAlias 'clapfindphone'
            keyPassword 'cfp1568794'
            def keystore = rootDir.toString() + File.separator + "keystore" + File.separator + "clapfindphone_pwd_cfp1568794.jks";
            System.out.println("keystore : " + keystore);
            storeFile file(keystore)
            storePassword 'cfp1568794'
        }
    }
    compileSdk 33
    defaultConfig {
        applicationId "com.clap.find.tool.myphone"
        minSdk 24
        targetSdk 33
        versionCode 10002
        versionName "1.0.2"
        multiDexEnabled true

        buildConfigField "String", "PRIVACY_URL", "\"" + PRIVACY_URL[applicationId] + "\""
        buildConfigField "String", "EMAIL_US_ADDRESS", "\"" + EMAIL_US_ADDRESS[applicationId] + "\""
        buildConfigField "String", "UTM", "\"" + UTM[applicationId] + "\""
        buildConfigField "String", "ONESIGNAL_APP_ID", "\"" + ONESIGNAL_APP_ID[applicationId] + "\""
        buildConfigField "String", "TALKING_DATA_APP_KEY", "\"" + TALKING_DATA_APP_KEY[applicationId] + "\""
        buildConfigField "String", "UMENG_APP_KEY", "\"" + UMENG_APP_KEY[applicationId] + "\""

        ndk {
            //根据需要 自行选择添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "5g"
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->

        variant.outputs.all { output ->
            if (variant.buildType.name == 'release') {
                def releaseApkName = PRODUCT_NAME[applicationId] + "_v" + android.defaultConfig.versionName +
                        '_release' + "_" + getDate() + '.apk'
                outputFileName = new File(releaseApkName)
            }
        }
    }
}


apply plugin: 'stringfog'
import com.github.megatronking.stringfog.plugin.kg.HardCodeKeyGenerator
stringfog {
    // 这是加解密 key，可以自由定义。
    kg new HardCodeKeyGenerator('blood_pressure_tracker' + getDate())
    // 开关
    enable true
    // 加解密库的实现类路径，需和上面配置的加解密算法库一致。
    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
    // 指定需加密的代码包路径，可配置多个，未指定将默认全部加密。
    fogPackages = ['com.clapping', 'com.sync']
}

def getConfigKey() {
    def versionName = android.defaultConfig.versionName
    println "version name : " + versionName
    return String.valueOf(("fine-" + versionName).hashCode())
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.intuit.ssp:ssp-android:1.0.6'
    implementation files('libs/musicg-1.4.2.0.jar')
    //lottiee
    implementation 'com.airbnb.android:lottie:6.0.0'
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.lifecycle:lifecycle-process:2.6.1'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'androidx.multidex:multidex:2.0.1'

    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9"

    if (isBuildRelease() || true) {
        implementation("com.hauyu:adsdk:${rootProject.ext.adsdk_version}")
    } else {
        implementation("com.hauyu:adsdk:${rootProject.ext.adsdk_version}@aar")
        implementation 'androidx.percentlayout:percentlayout:1.0.0'
        implementation 'com.google.android.gms:play-services-ads:21.3.0'
        // firebase
        implementation 'com.google.firebase:firebase-config:21.1.1'
    }
    //firebase
    implementation 'com.google.firebase:firebase-analytics:21.0.0'
    implementation('com.hauyu:bcsdk:3.4.8')

    // view预加载占位符，参考文章：https://www.jianshu.com/p/49439c425ae3
    implementation 'me.samlss:broccoli:1.0.0'

    // stringfog
    implementation 'com.github.megatronking.stringfog:xor:4.0.1'

    implementation 'com.umeng.umsdk:common:9.5.2'// 必选
    implementation 'com.umeng.umsdk:asms:1.4.1'// 必选
    implementation 'com.umeng.umsdk:apm:1.7.0' // 错误分析模块改为独立库，看crash和性能数据请一定集成
    // talking data
    implementation 'com.talkingdata:talkingdata:5.0.12-1'
}


if (new File(new File(project.getRootDir(), "app"), "google-services.json").exists()) {
    apply plugin: 'com.google.gms.google-services'
    println "apply plugin : ===================== com.google.gms.google-services ======================="
    googleServices { disableVersionCheck = false }
}

/**
 * 判断是否编译aab文件
 * @return
 */
def isBuildAabFile() {
    try {
        def result = getGradle().getStartParameter().getTaskRequests()[0]["args"][0].toString()
        return result.contains("bundle")
    } catch (Exception e) {
    }
    return false
}

apply from: 'https://taugin.gitee.io/adsdk/resguard_aab.gradle'

gradle.buildFinished {
    def error_list = []
    if (!new File(new File(project.getRootDir(), "app"), "google-services.json").exists()) {
        error_list.add("google-services.json is not exist")
    }
    if (PRIVACY_URL[android.defaultConfig.applicationId] == null
            || PRIVACY_URL[android.defaultConfig.applicationId].trim() == "") {
        error_list.add("PRIVACY_URL is not config")
    }
    if (EMAIL_US_ADDRESS[android.defaultConfig.applicationId] == null
            || EMAIL_US_ADDRESS[android.defaultConfig.applicationId].trim() == "") {
        error_list.add("EMAIL_US_ADDRESS is not config")
    }
    if (UTM[android.defaultConfig.applicationId] == null
            || UTM[android.defaultConfig.applicationId].trim() == "") {
        error_list.add("UTM is not config")
    }
    if (ONESIGNAL_APP_ID[android.defaultConfig.applicationId] == null
            || ONESIGNAL_APP_ID[android.defaultConfig.applicationId].trim() == "") {
        error_list.add("ONESIGNAL_APP_ID is not config")
    }
    if (TALKING_DATA_APP_KEY[android.defaultConfig.applicationId] == null
            || TALKING_DATA_APP_KEY[android.defaultConfig.applicationId].trim() == "") {
        error_list.add("TALKING_DATA_APP_KEY is not config")
    }
    if (UMENG_APP_KEY[android.defaultConfig.applicationId] == null
            || UMENG_APP_KEY[android.defaultConfig.applicationId].trim() == "") {
        error_list.add("UMENG_APP_KEY is not config")
    }
    if (error_list.size() > 0) {
        System.err.println("+++++++++++++++++++++++++++++++++++++++++++++")
        System.err.println error_list.join("\n")
        System.err.println("=============================================")
    }
}